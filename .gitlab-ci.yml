variables:
  OWNER: tewboat
  APPLICATION: tutor-aggregator
  RELEASE_VERSION: 1.0.$CI_PIPELINE_IID
  DEVELOP_DOCKER_STACK_FILE: k8s.yml

stages:
  - test
  - build_and_push
  - deploy

build-and-test:
  image: mcr.microsoft.com/dotnet/sdk:6.0-bullseye-slim
  stage: test
  script:
    - dotnet restore
    - dotnet build --configuration Release --no-restore
    - dotnet test  --configuration Release --no-build

linting:
  image: node:18.12.0
  stage: test 
  script:
    - cd ./SPA/ClientApp
    - npm ci
    - npm run lint

.docker-build: &build-template
  stage: build_and_push
  image: docker:stable
  before_script:
    - docker --version
    - docker login -u "$REGISTRY_LOGIN" -p "$REGISTRY_PASSWORD"
  script:
    - >
      docker build --no-cache
      -t "${IMAGE_NAME}:${RELEASE_VERSION}"
      -t "${IMAGE_NAME}:latest"
      -f .docker/amd64/spa.dockerfile ./
    - docker push "${IMAGE_NAME}:${RELEASE_VERSION}"
    - docker push "${IMAGE_NAME}:latest"
  after_script:
    - docker logout

build_and_push:
  <<: *build-template
  stage: build_and_push
  when: manual
  needs: [build-and-test, linting]
  variables:
    IMAGE_NAME: ${OWNER}/${APPLICATION}

login_registry:
  stage: deploy
  needs: [build_and_push]
  image: docker:stable
  script:
    - docker login -u "$LOCAL_REGISTRY_LOGIN" -p "$LOCAL_REGISTRY_PASSWORD" hub.66bit.ru

deploy_to_staging:
  stage: deploy
  image: hub.66bit.ru/shared/stk8s:1.26.2
  needs: [build_and_push, login_registry]
  script:
    - kubectl apply -f k8s.yml
  when: manual
